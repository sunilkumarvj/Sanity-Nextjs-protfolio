{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\sunilkumara.v.j\\\\Desktop\\\\NextjsSanity\\\\pages\\\\post\\\\[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"beerProducts\\\" && slug.current == $slug][0]{\\n  title,\\n  \\\"name\\\": author->name,\\n  \\\"categories\\\": categories[]->title,\\n  \\\"authorImage\\\": author->image,\\n  body\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from 'C:/Users/sunilkumara.v.j/Desktop/NextjsSanity/client.js';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar Post = function Post(props) {\n  var _props$title = props.title,\n      title = _props$title === void 0 ? 'Missing title' : _props$title,\n      _props$name = props.name,\n      name = _props$name === void 0 ? 'Missing name' : _props$name,\n      categories = props.categories,\n      authorImage = props.authorImage,\n      _props$body = props.body,\n      body = _props$body === void 0 ? [] : _props$body;\n  return __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, title), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"By \", name), categories && __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Posted in\", categories.map(function (category) {\n    return __jsx(\"li\", {\n      key: category,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 39\n      }\n    }, category);\n  })), authorImage && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar query = groq(_templateObject());\n\nPost.getInitialProps = function _callee(context) {\n  var _context$query$slug, slug;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // It's important to default the slug so that it doesn't return \"undefined\"\n          _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(client.fetch(query, {\n            slug: slug\n          }));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/sunilkumara.v.j/Desktop/NextjsSanity/pages/post/[slug].js"],"names":["groq","imageUrlBuilder","BlockContent","client","urlFor","source","image","Post","props","title","name","categories","authorImage","body","map","category","width","url","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,yDAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA,qBAOlBA,KAPkB,CAEpBC,KAFoB;AAAA,MAEpBA,KAFoB,6BAEZ,eAFY;AAAA,oBAOlBD,KAPkB,CAGpBE,IAHoB;AAAA,MAGpBA,IAHoB,4BAGb,cAHa;AAAA,MAIpBC,UAJoB,GAOlBH,KAPkB,CAIpBG,UAJoB;AAAA,MAKpBC,WALoB,GAOlBJ,KAPkB,CAKpBI,WALoB;AAAA,oBAOlBJ,KAPkB,CAMpBK,IANoB;AAAA,MAMpBA,IANoB,4BAMb,EANa;AAQtB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAUC,IAAV,CAFF,EAGGC,UAAU,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEGA,UAAU,CAACG,GAAX,CAAe,UAAAC,QAAQ;AAAA,WAAI;AAAI,MAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBA,QAApB,CAAJ;AAAA,GAAvB,CAFH,CAJJ,EASGH,WAAW,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAER,MAAM,CAACQ,WAAD,CAAN,CACFI,KADE,CACI,EADJ,EAEFC,GAFE,EADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVJ,EAkBE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEJ,IADV;AAEE,IAAA,YAAY,EAAE;AAAEK,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMjB,MAAM,CAACkB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlBF,CADF;AA0BD,CAlCD;;AAoCA,IAAMC,KAAK,GAAGtB,IAAH,mBAAX;;AAQAO,IAAI,CAACgB,eAAL,GAAuB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB;AADqB,gCAECA,OAAO,CAACF,KAFT,CAEbG,IAFa,EAEbA,IAFa,oCAEN,EAFM;AAAA;AAAA,2CAGRtB,MAAM,CAACuB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,YAAAA,IAAI,EAAJA;AAAF,WAApB,CAHQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAMA,eAAelB,IAAf","sourcesContent":["import groq from 'groq'\r\nimport imageUrlBuilder from '@sanity/image-url'\r\nimport BlockContent from '@sanity/block-content-to-react'\r\nimport client from 'C:/Users/sunilkumara.v.j/Desktop/NextjsSanity/client.js'\r\n\r\nfunction urlFor (source) {\r\n  return imageUrlBuilder(client).image(source)\r\n}\r\n\r\nconst Post = (props) => {\r\n  const {\r\n    title = 'Missing title',\r\n    name = 'Missing name',\r\n    categories,\r\n    authorImage,\r\n    body = []\r\n  } = props\r\n  return (\r\n    <article>\r\n      <h1>{title}</h1>\r\n      <span>By {name}</span>\r\n      {categories && (\r\n        <ul>\r\n          Posted in\r\n          {categories.map(category => <li key={category}>{category}</li>)}\r\n        </ul>\r\n      )}\r\n      {authorImage && (\r\n        <div>\r\n          <img\r\n            src={urlFor(authorImage)\r\n              .width(50)\r\n              .url()}\r\n          />\r\n        </div>\r\n      )}\r\n      <BlockContent\r\n        blocks={body}\r\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\r\n        {...client.config()}\r\n      />\r\n    </article>\r\n  )\r\n}\r\n\r\nconst query = groq`*[_type == \"beerProducts\" && slug.current == $slug][0]{\r\n  title,\r\n  \"name\": author->name,\r\n  \"categories\": categories[]->title,\r\n  \"authorImage\": author->image,\r\n  body\r\n}`\r\n\r\nPost.getInitialProps = async function (context) {\r\n  // It's important to default the slug so that it doesn't return \"undefined\"\r\n  const { slug = \"\" } = context.query\r\n  return await client.fetch(query, { slug })\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}