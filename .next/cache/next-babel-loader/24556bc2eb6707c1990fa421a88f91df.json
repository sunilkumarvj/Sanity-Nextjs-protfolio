{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sunilkumara.v.j\\\\Desktop\\\\NextjsSanity\\\\pages\\\\Products.js\",\n    _this2 = this;\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allSanityBeerProducts {\\n      edges {\\n        node {\\n          _id\\n          price\\n          title\\n          description\\n          image {\\n            asset {\\n              url\\n            }\\n          }\\n          slug {\\n            current\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport fetch from 'node-fetch';\nimport 'cross-fetch/polyfill';\nimport { createHttpLink } from 'apollo-link-http';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport './Products.css';\nimport Home from './index';\nvar client = new ApolloClient({\n  uri: 'http://localhost:8001/__graphql'\n});\n\nfunction Products() {\n  var _this = this;\n\n  var _useQuery = useQuery(gql(_templateObject())),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return data.projects.map(function (_ref) {\n    var title = _ref.title,\n        description = _ref.description,\n        price = _ref.price,\n        image = _ref.image;\n    return __jsx(\"div\", {\n      key: title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, __jsx(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Title:\", title), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, \"Description: \", description), \"Price: \", __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }, price), __jsx(\"img\", {\n      src: image.url,\n      alt: title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }));\n  });\n}\n\nvar App = function App() {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Beer Store \\uD83D\\uDE80\"), __jsx(Products, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/sunilkumara.v.j/Desktop/NextjsSanity/pages/Products.js"],"names":["React","render","fetch","createHttpLink","ApolloClient","ApolloProvider","useQuery","gql","Home","client","uri","Products","loading","error","data","projects","map","title","description","price","image","url","App"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAO,sBAAP;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,gBAAP;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,SAASC,QAAT,GAAoB;AAAA;;AAAA,kBACeL,QAAQ,CAACC,GAAD,oBADvB;AAAA,MACVK,OADU,aACVA,OADU;AAAA,MACDC,KADC,aACDA,KADC;AAAA,MACMC,IADN,aACMA,IADN;;AAwBlB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB;AAAA,QAAGC,KAAH,QAAGA,KAAH;AAAA,QAAUC,WAAV,QAAUA,WAAV;AAAA,QAAsBC,KAAtB,QAAsBA,KAAtB;AAAA,QAA6BC,KAA7B,QAA6BA,KAA7B;AAAA,WACvB;AAAK,MAAA,GAAG,EAAEH,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWA,KAAX,CADJ,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBC,WADhB,CAFF,aAKS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,KAAL,CALT,EAME;AAAK,MAAA,GAAG,EAAGC,KAAK,CAACC,GAAjB;AAAsB,MAAA,GAAG,EAAEJ,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADuB;AAAA,GAAlB,CAAP;AAWD;;AAED,IAAMK,GAAG,GAAG,SAANA,GAAM;AAAA,SACV,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEb,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADU;AAAA,CAAZ;;AASA,eAAea,GAAf","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport fetch from 'node-fetch';\r\nimport 'cross-fetch/polyfill';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport './Products.css'\r\nimport Home from './index';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:8001/__graphql',\r\n});\r\n\r\nfunction Products() {\r\n  const { loading, error, data } = useQuery(gql`\r\n  {\r\n    allSanityBeerProducts {\r\n      edges {\r\n        node {\r\n          _id\r\n          price\r\n          title\r\n          description\r\n          image {\r\n            asset {\r\n              url\r\n            }\r\n          }\r\n          slug {\r\n            current\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  `);\r\n \r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n \r\n  return data.projects.map(({ title, description,price, image }) => (\r\n    <div key={title}>\r\n        <h2>Title:{title}</h2>\r\n      <p>\r\n        Description: {description}\r\n      </p>\r\n      Price: <h3>{price}</h3>\r\n      <img src= {image.url} alt={title}></img>\r\n      {/* <button>Add to cart</button> */}\r\n    </div>\r\n  ));\r\n}\r\n \r\nconst App = () => (\r\n  <ApolloProvider client={client}>\r\n    <div>\r\n      <h2>Beer Store ðŸš€</h2>\r\n      <Products />\r\n    </div>\r\n  </ApolloProvider>\r\n);\r\n \r\nexport default App"]},"metadata":{},"sourceType":"module"}