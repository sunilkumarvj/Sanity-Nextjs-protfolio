{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sunilkumara.v.j\\\\Desktop\\\\NextjsSanity\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport fetch from 'node-fetch';\nimport 'cross-fetch/polyfill';\nimport { createHttpLink } from 'apollo-link-http';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:8001/__graphql'\n});\n\nfunction ExchangeRates() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(gql`\n  {\n    allSanityBeerProducts {\n      edges {\n        node {\n          _id\n          price\n          title\n          description\n          image {\n            asset {\n              url\n            }\n          }\n          slug {\n            current\n          }\n        }\n      }\n    }\n  }\n  `);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return data.allSanityBeerProducts.edges.map(({\n    title,\n    description,\n    price,\n    image\n  }) => __jsx(\"div\", {\n    key: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Title:\", title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Description: \", description), \"Price: \", __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 14\n    }\n  }, price), __jsx(\"img\", {\n    src: image.url,\n    alt: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  })));\n}\n\nconst App = () => __jsx(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }\n}, __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }\n}, __jsx(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }\n}, \"Beer Store \\uD83D\\uDE80\"), __jsx(ExchangeRates, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }\n})));\n\nexport default App;","map":{"version":3,"sources":["C:/Users/sunilkumara.v.j/Desktop/NextjsSanity/pages/index.js"],"names":["React","render","fetch","createHttpLink","ApolloClient","ApolloProvider","useQuery","gql","client","uri","ExchangeRates","loading","error","data","allSanityBeerProducts","edges","map","title","description","price","image","url","App"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAO,sBAAP;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,SAASC,aAAT,GAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,GAAI;;;;;;;;;;;;;;;;;;;;;GAAL,CAAzC;AAuBA,MAAII,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,qBAAL,CAA2BC,KAA3B,CAAiCC,GAAjC,CAAqC,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA;AAA5B,GAAD,KAC1C;AAAK,IAAA,GAAG,EAAEH,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWA,KAAX,CADJ,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBC,WADhB,CAFF,aAKS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CALT,EAME;AAAK,IAAA,GAAG,EAAGC,KAAK,CAACC,GAAjB;AAAsB,IAAA,GAAG,EAAEJ,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADK,CAAP;AAWD;;AAED,MAAMK,GAAG,GAAG,MACV,MAAC,cAAD;AAAgB,EAAA,MAAM,EAAEd,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADF,CADF;;AASA,eAAec,GAAf","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport fetch from 'node-fetch';\r\nimport 'cross-fetch/polyfill';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:8001/__graphql',\r\n});\r\n\r\nfunction ExchangeRates() {\r\n  const { loading, error, data } = useQuery(gql`\r\n  {\r\n    allSanityBeerProducts {\r\n      edges {\r\n        node {\r\n          _id\r\n          price\r\n          title\r\n          description\r\n          image {\r\n            asset {\r\n              url\r\n            }\r\n          }\r\n          slug {\r\n            current\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  `);\r\n \r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n \r\n  return data.allSanityBeerProducts.edges.map(({ title, description,price, image }) => (\r\n    <div key={title}>\r\n        <h2>Title:{title}</h2>\r\n      <p>\r\n        Description: {description}\r\n      </p>\r\n      Price: <h3>{price}</h3>\r\n      <img src= {image.url} alt={title}></img>\r\n      {/* <button>Add to cart</button> */}\r\n    </div>\r\n  ));\r\n}\r\n \r\nconst App = () => (\r\n  <ApolloProvider client={client}>\r\n    <div>\r\n      <h2>Beer Store ðŸš€</h2>\r\n      <ExchangeRates />\r\n    </div>\r\n  </ApolloProvider>\r\n);\r\n \r\nexport default App"]},"metadata":{},"sourceType":"module"}